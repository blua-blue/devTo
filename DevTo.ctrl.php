<?php
/* Generated by neoan3-cli */

namespace Neoan3\Components;

use Neoan3\Apps\Curl;
use Neoan3\Apps\Db;
use Neoan3\Apps\Ops;
use Neoan3\Apps\Stateless;
use Neoan3\Core\RouteException;
use Neoan3\Core\Unicore;
use Neoan3\Frame\Neoan;
use League\HTMLToMarkdown\HtmlConverter;

/**
 * Class DevTo
 *
 * @package Neoan3\Components
 */
class DevTo extends Neoan
{
    /**
     * Setup
     */
    function init()
    {
        $uni = new Unicore();
        $uni->uni('neoan')
            ->hook('main', 'devTo')
            ->output();
    }

    /**
     * @var bool
     */
    private $markdown = false;
    private $apiKey;

    function getDevTo(array $body = [])
    {
        Stateless::restrict();
        $answer = [];
        if (isset($body['apiKey'])) {
            $this->apiKey = $body['apiKey'];
            $header = $this->curlHeader();
            $testAnswer = Curl::curling('https://dev.to/api/articles/me',[],$header, 'GET');
            $credentials = getCredentials();
            $key = $credentials['blua_devto']['salt'];
            $encrypted = Ops::serialize(Ops::encrypt($body['apiKey'], $key));
            $answer = ['token' => $encrypted, 'test' => $testAnswer];
        }

        return $answer;
    }

    /**
     * @param array $body
     *
     * @return array
     * @throws RouteException
     */
    function postDevTo(array $body)
    {
        $info = [];
        try {
            $credentials = getCredentials();
            // check token
            if (!isset($_SERVER['HTTP_AUTHORIZATION'])) {
                return ['webhook' => 'denied'];
            }

            $this->apiKey = $this->getApiKey($credentials, substr($_SERVER['HTTP_AUTHORIZATION'], 7));


            switch ($body['event']) {
                case 'created':
                case 'updated':
                    // find existing
                    $update = $this->investigateStoreObject($body['payload']['store']);
                    $devBody = $this->transformPayload($body['payload']);
                $info = $this->sendToDevTo($devBody, $update);
                    break;
                case 'deleted':
                    break;
            }
        } catch (\Exception $e) {
            throw new RouteException('Unable to execute dev.to plugin', 500);
        }
        return ['webhook' => 'received', 'info' => $info];
    }

    /**
     * @param $payload
     * @param $existingId
     *
     * @return array|mixed
     * @throws \Neoan3\Apps\DbException
     */
    private function sendToDevTo($payload, $existingId)
    {
        $header = $this->curlHeader();
        $url = 'https://dev.to/api/articles' . ($existingId ? '/' . $existingId : '');
        $call = Curl::curling($url, json_encode(['article' => $payload]), $header, $existingId ? 'PUT' : 'POST');
        if (isset($call['id']) && !$existingId) {
            Db::ask('article_store', [
                'article_id' => '$' . $payload['id'],
                'store_key'  => 'dev-to-id',
                'value'      => $call['id']
            ]);
        } else {
            file_put_contents(__DIR__ . '/error-' . date('Y_m_d-H_i_s') . '.json', json_encode($call));
        }
        return $call;
    }
    private function curlHeader(){
        return [
            'User-Agent: neoan3',
            'Content-Type: application/json',
            'api-key: ' . $this->apiKey
        ];
    }

    /**
     * @param $credentials
     *
     * @param $token
     *
     * @return mixed
     * @throws \Exception
     */
    private function getApiKey($credentials, $token)
    {
        if (!isset($credentials['blua_devto']['salt'])) {
            throw new \Exception('Salt not set');
        }
        return Ops::decrypt(Ops::deserialize($token), $credentials['blua_devto']['salt']);
    }

    /**
     * @param $payload
     *
     * @return array
     */
    private function transformPayload($payload)
    {
        $isLocal = strpos(base, 'localhost') !== false;
        $article = [
            'title'         => $payload['name'],
            'tags'          => explode(',', $payload['keywords']),
            'description'   => $payload['teaser'],
            'body_markdown' => $this->prepareContent($payload['content'])
        ];
        if (!$isLocal) {
            $article['canonical_url'] = base . 'article/' . $payload['slug'] . '/';
        }
        if (!empty($payload['publish_date'])) {
            $article['published'] = true;
        }
        if ($payload['image_id'] && !$isLocal) {
            $article['cover_image'] = base . $payload['image']['path'];
        }

        return $article;
    }

    /**
     * @param $contentArray
     *
     * @return string
     */
    private function prepareContent($contentArray)
    {
        $content = '';
        foreach ($contentArray as $contentPart) {
            $content .= $this->convertContent($contentPart['content']);
        }
        return $content;
    }

    /**
     * @param $content
     *
     * @return string
     */
    private function convertContent($content)
    {
        if (!$this->markdown) {
            $this->markdown = new HtmlConverter(['strip_tags' => true]);
        }
        return $this->markdown->convert($content);
    }

    /**
     * @param $store
     *
     * @return bool
     */
    private function investigateStoreObject($store)
    {
        foreach ($store as $possible) {
            if ($possible['store_key'] === 'dev-to-id') {
                return $possible['value'];
            }
        }
        return false;
    }

}
